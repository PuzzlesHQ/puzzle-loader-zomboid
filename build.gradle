plugins {
    id 'java'
    id 'maven-publish'
    id("io.github.sgtsilvio.gradle.maven-central-publishing") version "0.4.0"
}

var manipulator = file("$projectDir/src/main/resources/puzzle-loader-zomboid.manipulator")

def ref = System.getenv("GITHUB_REF")

group = p_group
version = (ref != null && ref.startsWith("refs/tags/")) ? ref.tokenize('/').last().replaceFirst(/^v/, '') : p_version

String mavenUrl = System.getenv("MAVEN_URL")

String envRepo = System.getenv("MAVEN_REPO");
String mavenRepo = envRepo != null ? envRepo : "releases";

java {
    withJavadocJar()
    withSourcesJar()

    sourceCompatibility = '17'
    targetCompatibility = '17'
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation "org.jetbrains:annotations:24.0.0"
    implementation "dev.puzzleshq:puzzle-annotations:1.0.0"

    implementation "com.github.PuzzlesHQ:puzzle-loader-core:1.0.1-alpha:client"
    implementation "com.github.PuzzlesHQ:puzzle-loader-core:1.0.1-alpha:common"
}

processResources {
    def projectProperties = [
            "p_name": p_name,
            "p_version": ((String)version).contains(".") ? version : "0.0.0",
            "p_desc": p_desc,

            "p_id": p_id,
            "p_group": p_group,

            "p_git": p_git
    ]

    inputs.properties projectProperties

    filesMatching(["puzzle_project.json"]) {
        expand projectProperties
    }
}

publishing {
    repositories {
        maven {
            name = "PuzzleHQsMaven"
            url = mavenUrl+ "/" +mavenRepo
            credentials {
                username = System.getenv("MAVEN_NAME")
                password = System.getenv("MAVEN_SECRET")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = p_group
            artifactId = p_id
            version = this.version

            from components.java

            pom {
                name = p_name
                description = p_desc
                url = p_git

                licenses {
                    license {
                        name = "GNU Lesser General Public License"
                        url = "https://www.gnu.org/licenses/lgpl-2.1.html"
                        distribution = "LGPL"
                        comments = "This project includes LGPL-licensed components."
                    }
                }

                developers {
                    developer {
                        id = 'mrzombii'
                        name = 'Mr Zombii'
                        email = 'thezombiigames@gmail.com'
                    }
                }
                scm {
                    connection = "${p_git}.git"
                    developerConnection = "${p_git}.git"
                    url = "${p_git}.git"
                }
            }
        }
    }
}

if (ref != null) {
    signing {
        useGpgCmd()
        sign(publishing.publications[0])
    }
}

FileInputStream stream = new FileInputStream(manipulator)
byte[] bytes = stream.readAllBytes()
stream.close()
String str = new String(bytes)

AccessWriters.init(null)
AccessWriters.MERGED.add(AccessWriters.getFormat("manipulator").parse(str))

import dev.puzzleshq.accesswriter.AccessWriters
import me.lucko.jarrelocator.JarRelocator
import me.lucko.jarrelocator.Relocation
import dev.puzzleshq.buildsrc.GenericTransformer
import org.gradle.api.artifacts.transform.TransformParameters;

abstract class MyTransform implements TransformAction<TransformParameters.None> {

    @InputArtifact
    abstract Provider<FileSystemLocation> getInputArtifact();

    @Override
    void transform(TransformOutputs outputs) {
        var inp = inputArtifact.get().asFile;
        var out = outputs.file(inp.name.replace(".jar", "-transformed.jar"));

        List<Relocation> rules = new ArrayList<>();
//        rules.add(new Relocation("org.objectweb", "bundled.org.objectweb"));
//        rules.add(new Relocation("org.spongepowered.include", "bundled"));

        JarRelocator relocator = new JarRelocator(inp, out, rules);
        relocator.run();

        GenericTransformer.transform(out)
    }
}
Attribute<Boolean> manipulated = Attribute.of("manipulated", Boolean.class);

afterEvaluate {
    project.getDependencies().getAttributesSchema().attribute(manipulated);
    project.getDependencies().getArtifactTypes().getByName("jar", artifact -> {
        artifact.getAttributes().attribute(manipulated, false);
    });

    project.getDependencies().registerTransform(MyTransform) {
        getFrom().attribute(manipulated, false);
        getTo().attribute(manipulated, true);
    }

    project.getConfigurations().all(config -> {
        if (config.isCanBeResolved())
            config.getAttributes().attribute(manipulated, true);
    });
}