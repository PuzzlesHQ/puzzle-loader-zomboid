import dev.puzzleshq.buildsrc.zomboid.ZomboidPlugin
import dev.puzzleshq.buildsrc.DepUtils
import dev.puzzleshq.buildsrc.widen.WidenerPlugin

plugins {
    id 'java'
    id 'maven-publish'
    id("io.github.sgtsilvio.gradle.maven-central-publishing") version "0.4.0"
    id 'com.gradleup.shadow'
}

def ref = System.getenv("GITHUB_REF")

group = p_group
version = (ref != null && ref.startsWith("refs/tags/")) ? ref.tokenize('/').last().replaceFirst(/^v/, '') : p_version

apply plugin: WidenerPlugin

widenerPlugin {
    widenerPath.set(file("$projectDir/src/common/resources/puzzle-loader-zomboid.manipulator"))
}
group = p_group
version = (ref != null && ref.startsWith("refs/tags/")) ? ref.tokenize('/').last().replaceFirst(/^v/, '') : p_version

sourceSets {
    client
    common
    server
}

configurations {
    allCompileOnly

    clientCompileOnly.extendsFrom(allCompileOnly)
    commonCompileOnly.extendsFrom(allCompileOnly)
    serverCompileOnly.extendsFrom(allCompileOnly)

    allImpl
    clientImplementation.extendsFrom(allImpl)
    commonImplementation.extendsFrom(allImpl)
    serverImplementation.extendsFrom(allImpl)

    allImplLoader
    clientImplementation.extendsFrom(allImplLoader)
    commonImplementation.extendsFrom(allImplLoader)
    serverImplementation.extendsFrom(allImplLoader)

    clientBundle
    commonBundle
    serverBundle

    clientImplementation.extendsFrom(clientBundle)
    commonImplementation.extendsFrom(commonBundle)
    serverImplementation.extendsFrom(serverBundle)

    clientInternal
    serverInternal

    clientImplementation.extendsFrom(clientInternal)
    serverImplementation.extendsFrom(serverInternal)

}
apply plugin: ZomboidPlugin

boolean usePuzzleCoreJitpackRelease = true

String jpVersion = "79a4fd9a75"
String centralVersion = "1.1.0-alpha"

String mavenUrl = System.getenv("MAVEN_URL")

String envRepo = System.getenv("MAVEN_REPO")
String mavenRepo = envRepo != null ? envRepo : "releases"

java {
    withJavadocJar()
    withSourcesJar()

    sourceCompatibility = '17'
    targetCompatibility = '17'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    clientCompileOnly "dev.puzzleshq:puzzle-annotations:1.0.0"
    serverCompileOnly "dev.puzzleshq:puzzle-annotations:1.0.0"
    commonCompileOnly "dev.puzzleshq:puzzle-annotations:1.0.0"

    clientCompileOnly "org.jetbrains:annotations:24.0.0"
    serverCompileOnly "org.jetbrains:annotations:24.0.0"
    commonCompileOnly "org.jetbrains:annotations:24.0.0"

    if (usePuzzleCoreJitpackRelease) {
        clientBundle "com.github.PuzzlesHQ:puzzle-loader-core:$jpVersion:client"
        serverBundle "com.github.PuzzlesHQ:puzzle-loader-core:$jpVersion:server"
        allImpl("com.github.PuzzlesHQ:puzzle-loader-core:$jpVersion:common")
    } else {
        clientBundle "dev.puzzleshq:puzzle-loader-core:$centralVersion:client"
        serverBundle "dev.puzzleshq:puzzle-loader-core:$centralVersion:server"
        allImpl("dev.puzzleshq:puzzle-loader-core:$centralVersion:common")
    }

    commonBundle("net.neoforged:bus:$eventbus_version") {
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
    }

    clientImplementation(sourceSets.common.output)
    serverImplementation(sourceSets.common.output)

    // loader dependencies
    allImplLoader "org.ow2.asm:asm:$asm_version"
    allImplLoader "org.ow2.asm:asm-tree:$asm_version"
    allImplLoader "org.ow2.asm:asm-util:$asm_version"
    allImplLoader "org.ow2.asm:asm-analysis:$asm_version"
    allImplLoader "org.ow2.asm:asm-commons:$asm_version"

    allImplLoader "dev.puzzleshq:puzzle-annotations:1.0.0"
    allImplLoader "dev.puzzleshq:access-writer:1.0.4+c"
    allImplLoader "dev.puzzleshq:mod-format-framework:1.1.1"

    allImplLoader "org.hjson:hjson:$hjson_version"

    allImplLoader "org.reflections:reflections:$reflections_version"

    allImplLoader annotationProcessor("io.github.llamalad7:mixinextras-fabric:$mixin_extras_version")
    allImplLoader("net.fabricmc:sponge-mixin:$mixin_version") {
        exclude group: "com.google.code.gson", module: "gson"
        exclude group: "com.google.guava", module: "guava"
    }

    allImplLoader "net.sf.jopt-simple:jopt-simple:$jopt_simple_version"

    allImplLoader "com.github.villadora:semver:0.0.3"
}

java {
    withJavadocJar()
    withSourcesJar()

    sourceCompatibility = '17'
    targetCompatibility = '17'
}

processCommonResources {
    def projectProperties = [
            "p_name": p_name,
            "p_version": ((String)version).contains(".") ? version : "69.69.69",
            "p_desc": p_desc,

            "p_id": p_id,
            "p_group": p_group,

            "p_git": p_git
    ]

    inputs.properties projectProperties

    filesMatching(["puzzle_project.json", "puzzle.mod.json"]) {
        expand projectProperties
    }
}

publishing {
    repositories {
        maven {
            name = "PuzzleHQsMaven"
            url = mavenUrl+ "/" +mavenRepo
            credentials {
                username = System.getenv("MAVEN_NAME")
                password = System.getenv("MAVEN_SECRET")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        maven(MavenPublication) {
            groupId = p_group
            artifactId = p_id
            version = this.version

            from components.java

            pom {
                name = p_name
                description = p_desc
                url = p_git

                licenses {
                    license {
                        name = "GNU Lesser General Public License"
                        url = "https://www.gnu.org/licenses/lgpl-2.1.html"
                        distribution = "LGPL"
                        comments = "This project includes LGPL-licensed components."
                    }
                }

                developers {
                    developer {
                        id = 'mrzombii'
                        name = 'Mr Zombii'
                        email = 'thezombiigames@gmail.com'
                    }
                    developer {
                        id = 'zombi'
                        name = 'Zombi'
                    }
                }
                scm {
                    connection = "${p_git}.git"
                    developerConnection = "${p_git}.git"
                    url = "${p_git}.git"
                }
            }
        }
    }
}

if (ref != null) {
    signing {
        useGpgCmd()
        sign(publishing.publications[0])
    }
}

wrapper {
    gradleVersion = "8.14"
    distributionType = Wrapper.DistributionType.ALL
}