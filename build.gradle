import dev.puzzleshq.buildsrc.DepUtils
import org.hjson.JsonArray
import org.hjson.JsonObject
import org.hjson.Stringify

plugins {
    id 'java'

    id 'jigsaw-project-zomboid'

    id 'maven-publish'
    id 'com.gradleup.shadow'
}

configurations {
    clientImpl
    serverImpl
    commonImpl
}

jigsawGame {
    splitSourceSets()
}

group = p_group
version = p_version

jigsawAccess {
    addManipulators(file("$projectDir/src/common/resources/puzzle-loader-zomboid.manipulator"))
}

jigsawInject {
    setModJson(file("$projectDir/src/common/resources/puzzle.mod.json"))
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    puzzleLoader "dev.puzzleshq:puzzle-loader-core:1.3.4-alpha"

    commonImpl commonImplementation ("net.neoforged:bus:$eventbus_version") {
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.apache.logging.log4j", module: "log4j-core"
    }
}

String mavenUrl = System.getenv("MAVEN_URL")

String envRepo = System.getenv("MAVEN_REPO")
String mavenRepo = envRepo != null ? envRepo : "releases"

java {
    withJavadocJar()
    withSourcesJar()

    sourceCompatibility = '17'
    targetCompatibility = '17'
}

processCommonResources {
    def projectProperties = [
            "p_name": p_name,
            "p_version": ((String)version).contains(".") ? version : "69.69.69",
            "p_desc": p_desc,

            "p_id": p_id,
            "p_group": p_group,

            "p_git": p_git
    ]

    inputs.properties projectProperties

    filesMatching(["puzzle_project.json", "puzzle.mod.json"]) {
        expand projectProperties
    }
}

publishing {
    repositories {
        maven {
            name = "PuzzleHQsMaven"
            url = mavenUrl + "/" + mavenRepo
            allowInsecureProtocol = true
            credentials {
                username = System.getenv("MAVEN_NAME")
                password = System.getenv("MAVEN_SECRET")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
        mavenLocal()
    }

    publications {
        maven(MavenPublication) {
            groupId = p_group
            artifactId = p_id

            from components.java

            pom {
                name = p_name
                description = p_desc
                url = p_git

                licenses {
                    license {
                        name = "GNU Lesser General Public License"
                        url = "https://www.gnu.org/licenses/lgpl-3.0.html"
                        distribution = "LGPL"
                        comments = "This project includes LGPL-licensed components."
                    }
                }

                developers {
                    developer {
                        id = 'mrzombii'
                        name = 'Mr Zombii'
                        email = 'thezombiigames@gmail.com'
                    }
                }
                scm {
                    connection = "${p_git}.git"
                    developerConnection = "${p_git}.git"
                    url = "${p_git}.git"
                }
            }
        }
    }
}


static def add(String side, JsonObject o, Configuration configuration, String type) {
    JsonArray array
    if (o.get(side) == null) array = new JsonArray()
    else array = o.get(side).asArray()

    for (final def dep in configuration.allDependencies) {
        JsonObject object = new JsonObject();

        def classifier = DepUtils.getClassifier(dep);
        if (classifier != null) object.add("classifier", classifier);
        object.add("groupId", dep.group);
        object.add("artifactId", dep.name);
        object.add("version", dep.version);
        object.add("type", type);
        array.add(object)
    }
    o.add(side, array)
}

tasks.register("mkDeps") {
    File file = new File("$projectDir/dependencies.json")

    JsonObject object = new JsonObject();
    add("client", object, configurations.clientImpl, "implementation")
    add("server", object, configurations.serverImpl, "implementation")
    add("common", object, configurations.commonImpl, "implementation")

    JsonArray repos = new JsonArray()
    for (i in 0..<project.repositories.size()) {
        def dependency = project.repositories[i];
        if (dependency instanceof MavenArtifactRepository) {
            if (dependency.name == "MavenLocal") continue
            JsonObject repo = new JsonObject()
            repo.add("name", dependency.name)
            repo.add("url", dependency.url.toString())
            repos.add(repo)
        }
    }
    object.add("repos", repos)

    file.write(object.toString(Stringify.FORMATTED))
}

wrapper {
    gradleVersion = "8.14"
    distributionType = Wrapper.DistributionType.ALL
}

java.toolchain.languageVersion.set(JavaLanguageVersion.of(17))
